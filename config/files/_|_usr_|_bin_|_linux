#!/usr/bin/env python2
# -*- coding: utf-8 -*-

"""
Description:
    Personal linux interface.

Usage:
    linux dic play <voice>
    linux dic play all
    linux sd compile audiobooks <dest>
    linux mp3 save <path>
    linux drive update
    linux android apps
    linux android install
    linux devices

Options:
    -h --help   Extensive help message.
"""

import json
import re
import fnmatch
import shutil
import sys

from os import path, walk, listdir, environ, getcwd, makedirs
from subprocess import Popen, PIPE, CalledProcessError
from docopt import docopt


# sys.exit codes: http://stackoverflow.com/questions/1101957/are-there-any-standard-exit-status-codes-in-linux


class Shell(object):
	@staticmethod
	def _parseCmd(cmd):
		if isinstance(cmd, basestring):
			return cmd.split()
		return cmd

	@staticmethod
	def _calledProcessError(cmd, err):
		raise CalledProcessError(1, ' '.join(Shell._parseCmd(cmd)), output=err)

	@staticmethod
	def cmdWait(cmd, catchErr=False, output=False, workingDir=None):

		output, err = Shell.cmd(cmd, output=output, workingDir=workingDir).communicate()

		if not catchErr and err != '':
			Shell._calledProcessError(cmd, err)

		if catchErr:
			return err
		else:
			return output

	@staticmethod
	def cmd(cmd, output=False, workingDir=None):

		stdout = None if output else PIPE
		stderr = None if output else PIPE

		return Popen(Shell._parseCmd(cmd), stdout=stdout, stderr=stderr, cwd=workingDir)


class Utils(object):
	@staticmethod
	def openImage(*paths):
		return Shell.cmd(['eog', path.join(*paths)])

	@staticmethod
	def openAudioPlayer(*paths):
		Shell.cmdWait(['vlc', path.join(*paths)], catchErr=True)

	@staticmethod
	def openBrowser(url):
		Shell.cmd(['sensible-browser', url])


class Fs(object):
	@staticmethod
	def findFiles(dir, glob):
		print(' > Searching for "{}" in "{}"'.format(glob, dir))
		matches = []
		for root, dirnames, filenames in walk(dir):
			for filename in fnmatch.filter(filenames, glob):
				matches.append(path.join(root, filename))

		if len(matches) == 0:
			print(' ! No file found')

		return matches

	@staticmethod
	def mvToTrash(*paths):
		print(' > Moving to trash: "{}"'.format(path.join(*paths)))
		Shell.cmdWait(['sudo', 'gvfs-trash', path.join(*paths)])

	@staticmethod
	def getCwd(*paths):
		return path.join(
			getcwd(),
			*paths
		)

	@staticmethod
	def setFilePermissions(*paths):
		Shell.cmdWait(['sudo', 'chmod', '775', path.join(*paths)])

	@staticmethod
	def mkdir(*paths):
		dirPath = path.join(*paths)
		# Check dir existance
		if path.isfile(dirPath):
			print(' ! Is not dir: {}'.format(dirPath))
			sys.exit(64)
		if not path.exists(dirPath):
			print(' > mkdir: {}'.format(dirPath))
			makedirs(dirPath)


class GDrive(object):
	@staticmethod
	def getPath(*paths):
		return path.join('/home', environ.get("USER"), 'gdrive', *paths)

	@staticmethod
	def update():
		print(' > Updating drive')
		Shell.cmdWait('grive --progress-bar', catchErr=True, output=True, workingDir=GDrive.getPath())

	@staticmethod
	def saveEmotion(*src):
		emotion = raw_input(' ? Custvo: ')
		destPath = GDrive.getPath('custva', emotion, path.basename(*src))

		# Create new emotion if not exist
		if not (emotion in listdir(GDrive.getPath('custva'))):
			destDir = path.dirname(destPath)
			if 'y' == raw_input(' ? mkdir "{}" (y/n):'.format(destDir)):
				Fs.mkdir(destDir)

		# Copy to emotion folder
		print(' > Saving emotion: "{}"'.format(destPath))
		shutil.copyfile(path.join(*src), destPath)

	@staticmethod
	def saveQuestion(*src):
		destPath = GDrive.getPath('vprasanja', path.basename(*src))

		# Copy to question folder
		print(' > Saving question: "{}"'.format(destPath))
		shutil.copyfile(path.join(*src), destPath)

	@staticmethod
	def saveAudioBook(*src):
		destPath = GDrive.getPath('knjige/audio', path.basename(*src))
		print(' > Saving audiobook: "{}"'.format(destPath))
		shutil.copyfile(path.join(*src), destPath)


class AAX(object):
	def __init__(self, *file):
		self.path = path.join(*file)

		meta = Shell.cmdWait(['ffprobe', self.path], catchErr=True)
		self.author = re.findall('artist\s*:\s*(.*)', meta)[0]
		self.title = re.sub('\s*\(\s*Unabridged\s*\)\s*', '', re.findall('title\s*:\s*(.*)', meta)[0])
		self.bitrate = re.findall('bitrate:\s*(.*)\s*kb', meta)[0]

	def getTitle(self, fileExt=None):
		if fileExt:
			fileExt = '.{}'.format(fileExt)

		return re.sub(r'[\\/:"*?<>|]+', "", '{} - {}{}'.format(
			self.author, self.title, fileExt
		))

	def to_mp3(self):
		fileTitle = self.getTitle(fileExt='mp3')
		compiledPath = Fs.getCwd(fileTitle)

		print(' > Compiling "{}" to "{}"'.format(self.path, compiledPath))
		cmdArr = 'ffmpeg -v error -stats -activation_bytes 0cedab08 -i {input} -vn -c:a libmp3lame -ab {bitrate}'.format(
			input=self.path,
			bitrate=self.bitrate
		).split()
		cmdArr.append(fileTitle)
		Shell.cmdWait(cmdArr, output=True, catchErr=True)

		Fs.setFilePermissions(compiledPath)

		return fileTitle


class Device(object):
	@staticmethod
	def getAll():
		allDevices = []
		lsblk = json.loads(
			Shell.cmdWait('lsblk -f -J')
		)

		for blockdevice in lsblk['blockdevices']:

			devices = [blockdevice]
			if 'children' in blockdevice:
				devices += blockdevice['children']

			allDevices += devices

		return allDevices

	def __init__(self, uuid, alias):
		self.uuid = uuid
		self.alias = alias
		self.mountPath = path.join('/media', environ.get("USER"), self.alias)
		self.devicePath = None

		self._setDevicePath()
		self.mount()

	def getMountPath(self, *paths):
		return path.join(self.mountPath, path.join(*paths))

	def _setDevicePath(self):
		for device in Device.getAll():
			if self.uuid == device['uuid']:
				self.devicePath = path.join('/dev', device['name'])

		if not self.devicePath:
			print(' ! Device "{}" not found'.format(self.alias))
			sys.exit(68)

	def mount(self):
		print(' > Mounting: "{}" to "{}"'.format(self.devicePath, self.mountPath))
		Fs.mkdir(self.mountPath)
		Shell.cmdWait(['sudo', 'mount', self.devicePath, self.mountPath], catchErr=True)

	def unmount(self):
		print(' > UnMounting: "{}"'.format(self.mountPath))
		Shell.cmdWait(['sudo', 'unmount', self.devicePath, self.mountPath], catchErr=True)


class Dictaphone(Device):
	uuid = "0000-006F"
	alias = 'dictaphone'

	def __init__(self):
		super(Dictaphone, self).__init__(self.uuid, self.alias)

		self.todos = 'A'
		self.emotions = 'B'
		self.questions = 'C'
		self.dvigZavesti = 'D'

	def getPath(self, *paths):
		return self.getMountPath('VOICE', *paths)

	def getVoicesPaths(self, *voices):
		filesPaths = []
		for voice in voices:
			for voicesFile in listdir(self.getPath(voice)):
				filesPaths.append(
					self.getPath(voice, voicesFile)
				)

		return filesPaths


class Mp3Player(Device):
	uuid = '846D-FD0B'
	alias = 'mp3Player'

	def __init__(self):
		super(Mp3Player, self).__init__(self.uuid, self.alias)

	def getMusicPath(self, *paths):
		return self.getMountPath('MUSIC', *paths)

	def saveMusic(self, *src):
		src = path.join(*src)
		destPath = self.getMusicPath(path.basename(src))

		if path.isfile(src) and path.exists(src) and 'y' == raw_input(' ? Split file on 10 min chunks (y/n):'):
			srcName, ext = path.splitext(src)
			destDir = self.getMusicPath(path.basename(srcName))
			destPath = '{}{}'.format(path.join(destDir, 'part_%03d'), ext)
			Fs.mkdir(destDir)
			print(' > saving mp3: {}'.format(destPath))
			Shell.cmdWait(['ffmpeg', '-i', src, '-f', 'segment', '-segment_time', '600', '-c', 'copy', destPath],
			              output=True, catchErr=True)
		else:
			print(' > saving mp3: {}'.format(destPath))
			Shell.cmdWait(['sudo', 'cp', src, destPath], output=True)


class SdCard(Device):
	uuid = '5C6B-303E'
	alias = 'sdCard'

	def __init__(self):
		super(SdCard, self).__init__(self.uuid, self.alias)


class Android(object):
	apps = [
		'pl.solidexplorer2',
		'com.google.android.apps.adm',
		'com.google.android.apps.inbox',
		'si.izum.mcobiss',
		'com.goodreads',
		'com.ijinshan.kbackup',
		'com.acd.ekadashi',
		'com.audible.application',
		'com.google.android.calendar',
		'com.popularapp.sevenmins',
		'com.sebmorand.brightcom',
		'com.whatsapp',
		'org.dayup.gtask',
		'pl.solidexplorer2',
		'ws.appdev.android.rotation2'
	]

	def __init__(self):
		Shell.cmdWait('sudo adb stop-server', catchErr=True)
		Shell.cmdWait('sudo adb start-server', catchErr=True, output=True)
		devices = re.findall('([A-Z0-9]{2,})\s*device', Shell.cmdWait('adb devices'))
		if len(devices) == 0:
			print(' ! No devices found')
			sys.exit(68)
		else:
			print(' > List of devices:')
			for device in devices:
				if device:
					print('\t- {}'.format(device))

	def installPackages(self):
		for app in Android.apps:
			Utils.openBrowser('https://play.google.com/store/apps/details?id={}'.format(app))

	def getInstalledApps(self):
		packages = Shell.cmdWait('adb shell pm list packages -3').replace('package:', '').split()

		return filter(lambda x: not re.match(r'^\s*$', x), packages)


if __name__ == '__main__':
	args = docopt(__doc__)

	if args['dic']:

		dic = Dictaphone()

		if args['play']:

			# Save voice
			voice = args['<voice>']

			# Get voices files.
			if voice == 'all':
				voice = 'D'  # Set voice to others which simulate non special files.
				voices = dic.getVoicesPaths('A', 'B', 'C', 'D')
			else:
				voices = dic.getVoicesPaths(voice)

			if len(voices) != 0:

				# Open image
				imageProcess = None
				if voice == dic.emotions:
					imageProcess = Utils.openImage(
						GDrive.getPath('custva', 'emotions.jpg')
					)

				if voice == dic.todos:
					Utils.openBrowser('https://calendar.google.com')

				# Process every file in voices
				for file in voices:
					print(' > {}'.format(file))

					# Open audio player with file
					Utils.openAudioPlayer(file)

					# Process emotional voices
					if voice == dic.emotions and 'y' == raw_input(' ? Upload file (y/n):'):
						GDrive.saveEmotion(file)
					if voice == dic.questions and 'y' == raw_input(' ? Upload file (y/n):'):
						GDrive.saveQuestion(file)

					# Move to trash if user wants it
					if 'y' == raw_input(' ? Trash file (y/n):'):
						Fs.mvToTrash(file)

				# Close image viewer
				if imageProcess:
					imageProcess.terminate()

				# Update drive
				if voice == dic.emotions and voice == dic.questions and 'y' == raw_input(' ? Update drive (y/n):'):
					GDrive.update()

			# Warn on no file
			else:
				print(' ! No file in "{}"'.format(voice))

		dic.unmount()

	if args['devices']:
		print(' > All connected devices:')
		for device in Device.getAll():
			if device['uuid']:
				print('\t- {}: {}'.format(
					device['name'], device['uuid']
				))

	if args['android']:
		android = Android()
		if args['apps']:
			packages = android.getInstalledApps()

			installedApps = []

			print(' > User packages:')
			for package in packages:
				if package in Android.apps:
					print('\t✔ {}'.format(package))
					installedApps.append(package)
				else:
					print('\t- {}'.format(package))

			for requiredApp in Android.apps:
				if not (requiredApp in installedApps):
					print('\t✖ {}'.format(requiredApp))

		if args['install']:
			android.installPackages()

	elif args['sd']:

		sdCard = SdCard()

		if args['compile']:
			if args['audiobooks']:

				dest = args['<dest>']

				Fs.mkdir(dest)

				# Get glob files .aax
				aaxFiles = Fs.findFiles(
					sdCard.mountPath, '*.aax'
				)

				# Process every aax file
				for aaxFile in aaxFiles:

					aax = AAX(aaxFile)

					if 'y' == raw_input(' ? Process "{}: {}" (y/n):'.format(aax.author, aax.title)):
						mp3File = aax.to_mp3()
						shutil.move(mp3File, path.join(dest, mp3File))

		sdCard.unmount()

	elif args['drive']:
		if args['update']:
			GDrive.update()

	elif args['mp3']:
		mp3Player = Mp3Player()
		if args['save']:
			mp3Player.saveMusic(args['<path>'])
		mp3Player.unmount()
