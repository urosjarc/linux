#!/usr/bin/env python2
"""
Description:
    Personal gadget interface.

Usage:
    gadget dic play <voice>
    gadget mp3 load audiobook
    gadget drive update

Options:
    -h --help   Extensive help message.
"""

from subprocess import Popen, PIPE, CalledProcessError
from docopt import docopt
import os
import json
import re
import fnmatch
import shutil

gadgets = {
    "sdc": {
        'uuid': '5C6B-303E',
        'alias': 'sdCard'
    },
    "dict": {
        'uuid': "0000-006F",
        'alias': 'dictaphone'
    },
    'mp3': {
        'uuid': "846D-FD0B",
        'alias': 'mp3player'
    }
}


def shell(command, catchErr=False, stdout=PIPE, stderr=PIPE):
    if isinstance(command, basestring):
        cmd = command.split()
    else:
        cmd = command

    output, err = Popen(cmd, stdout=stdout, stderr=stderr).communicate()

    if not catchErr and err != '':
        raise CalledProcessError(1, ' '.join(cmd), output=err)

    if catchErr:
        return err
    else:
        return output


def openImage(*path):
    return Popen('eog {}'.format(os.path.join(*path)).split(), stdout=PIPE, stderr=PIPE)


def getMountPoint(*path):
    return os.path.join('/media', os.environ.get("USER"), *path)


def findFiles(dir, glob):
    matches = []
    for root, dirnames, filenames in os.walk(dir):
        for filename in fnmatch.filter(filenames, glob):
            matches.append(os.path.join(root, filename))
    return matches


def gadgetsMounter(unmount=False):
    notFound = True
    lsblk = json.loads(
        shell('lsblk -f -J')
    )

    for blockdevice in lsblk['blockdevices']:

        devices = [blockdevice]
        if 'children' in blockdevice:
            devices += blockdevice['children']

        for device in devices:
            for i in gadgets:
                gadget = gadgets[i]
                if gadget['uuid'] == device['uuid']:
                    mountPoint = getMountPoint(gadget['alias'])

                    try:
                        if unmount:
                            print('Unmount: {}'.format(mountPoint))
                            shell('sudo unmount {} {}'.format(os.path.join('/dev', device['name']), mountPoint))
                        else:
                            print('Mount: {}'.format(mountPoint))
                            if not os.path.exists(mountPoint):
                                os.makedirs(mountPoint)
                            shell('sudo mount {} {}'.format(os.path.join('/dev', device['name']), mountPoint))
                    except:
                        None

                    notFound = False

    if (notFound):
        print('!!! No device is found...'.format())


def getDriveFolder(*path):
    return os.path.join('/home', os.environ.get("USER"), 'gdrive', *path)


def aaxToMp3(source):
    meta = aaxMetaInfo(source)

    cmdArr = 'ffmpeg -v error -stats -activation_bytes 0cedab08 -i {input} -vn -c:a libmp3lame -ab {bitrate}'.format(
        input=source,
        bitrate=meta['bitrate']
    ).split()

    cmdArr.append('{}'.format(meta['mp3']))

    shell(cmdArr, stdout=None, stderr=None, catchErr=True)


def aaxMetaInfo(source):
    meta = shell('ffprobe {}'.format(source), catchErr=True)

    author = re.findall('\s* artist \s*:\s*(.*)', meta)[0]
    title = re.sub('\s*\(\s*Unabridged\s*\)\s*', '', re.findall('title\s*:\s*(.*)', meta)[0])

    return {
        'mp3': re.sub(r'[\\/:"*?<>|]+', "", '{}: {}.mp3'.format(author, title)),
        'bitrate': re.findall('bitrate: (.*) kb\/s', meta)[0],
        'author': author,
        'title': title
    }


def updateDrive():
    print('Updating drive...')
    Popen('grive --progress-bar'.split(), cwd=getDriveFolder()).communicate()


if __name__ == '__main__':

    args = docopt(__doc__)

    if args['dic'] or args['mp3']:
        gadgetsMounter()

    if args['dic']:
        if args['play']:
            voicesPath = getMountPoint(gadgets['dict']['alias'], 'VOICE', args['<voice>'])
            voices = os.listdir(voicesPath)

            if len(voices) != 0:

                imageProcess = None
                if args['<voice>'] == 'A':
                    imageProcess = openImage(getDriveFolder('custva', 'emotions.jpg'))

                for file in voices:
                    print(' > {}'.format(file))
                    filePath = os.path.join(voicesPath, file)

                    shell('vlc {}'.format(filePath), catchErr=True)

                    if args['<voice>'] == 'A' and 'y' == raw_input('Upload file (y/n):'):
                        emotion = raw_input('Custvo: ')
                        drivePath = getDriveFolder('custva', emotion)
                        driveFilePath = os.path.join(drivePath, file)

                        if not (emotion in os.listdir(getDriveFolder('custva'))):
                            if 'y' == raw_input('mkdir "{}", nadaljuj (y/n):'.format(drivePath)):
                                os.makedirs(drivePath)
                                shell('chmod -R 775 {}'.format(drivePath))

                        shutil.copyfile(filePath, drivePath)
                        print(' > {}'.format(driveFilePath))

                    if 'y' == raw_input('Trash file (y/n):'):
                        shell('sudo gvfs-trash {}'.format(filePath))

                if imageProcess:
                    imageProcess.terminate()

                if 'y' == raw_input('Update drive (y/n):'):
                    updateDrive()
            else:
                print(' > No file in "{}"'.format(voicesPath))

    elif args['mp3']:
        if args['load']:
            if args['audiobook']:
                aaxFiles = findFiles(getMountPoint(gadgets['sdc']['alias']), '*.aax')

                for aaxFile in aaxFiles:
                    meta = aaxMetaInfo(aaxFile)
                    if 'y' == raw_input('Compile to mp3 & gdrive "{}" (y/n):'.format(meta['mp3'])):
                        driveAudio = getDriveFolder('knjige/audio', meta['mp3'])

                        aaxToMp3(aaxFile)

                        createFile = os.path.join(os.getcwd(), meta['mp3'])

                        shutil.copyfile(createFile, driveAudio)
                        shutil.copyfile(createFile, getMountPoint(gadgets['mp3']['alias'], 'MUSIC', meta['mp3']))
                        os.remove(createFile)


    elif args['drive']:
        if args['update']:
            updateDrive()

    gadgetsMounter(unmount=True)
